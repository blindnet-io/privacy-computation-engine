version: "3.9"

services:
  db:
    restart: always
    image: postgres:13.0-alpine
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${pg_user}
      - POSTGRES_PASSWORD=${pg_pass}
      - POSTGRES_DB=${pg_db_name}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 3s
      timeout: 4s
      retries: 5

  migrate:
    image: flyway/flyway
    command: -url=jdbc:postgresql://db:5432/${pg_db_name} -user=${pg_user} -password=${pg_pass} -table=Flyway -connectRetries=60 migrate
    volumes:
      - ./modules/core/src/main/resources/db/migration:/flyway/sql:ro
      # adding afterMigrate callback to /flyway/jars (to insert data) might be better than spawning another container
      # https://flywaydb.org/documentation/usage/api/hooks#callsbacks
    depends_on:
      db:
        condition: service_healthy

  insert_initial_data:
    image: alpine:3.16
    command:
      - /bin/sh
      - -c
      - |
        apk --no-cache add postgresql13-client
        psql postgresql://${pg_user}:${pg_pass}@db:5432/${pg_db_name} -f /sql/insert.sql
    volumes:
      - ./scripts/insert.sql:/sql/insert.sql:ro
    depends_on:
      migrate:
        condition: service_completed_successfully
  
  redis:
    restart: always
    image: redis:6.2.7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 30

  pce:
    image: pce:latest
    ports:
      - ${pce_api_port}:${pce_api_port}
    environment:
      - API_HOST=${pce_api_host}
      - API_PORT=${pce_api_port}
      - DB_URI=jdbc:postgresql://db:5432/${pg_db_name}
      - DB_USER=${pg_user}
      - DB_PASS=${pg_pass}
      - APP_CALLBACK_URI=${pce_callback_uri}
    depends_on:
      insert_initial_data:
        condition: service_completed_successfully
    healthcheck:
      test: curl --fail localhost:9000/v0/health || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
